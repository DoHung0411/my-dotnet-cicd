# Tên của workflow, sẽ hiển thị trên tab Actions của GitHub
name: Local CI/CD Deployment with Reverse Proxy

# Kích hoạt workflow mỗi khi có push lên nhánh main
on:
  push:
    branches:
      - main

jobs:
  # Job này để build và triển khai ứng dụng .NET (CHẠY TRƯỚC)
  build-and-deploy-app:
    runs-on: self-hosted

    steps:
      # Bước 1: Checkout code từ repository về runner
      - name: Checkout repository
        uses: actions/checkout@v4

      # BƯỚC MỚI: Chạy unit test
      # Step này sẽ tự động tìm và chạy tất cả các test trong solution.
      # Nếu có bất kỳ test nào thất bại, workflow sẽ dừng lại ở đây.
      - name: Run unit tests
        run: dotnet test MyDotNetApp/MyDotNetApp.sln

      # Bước 2: Build Docker image từ Dockerfile (chỉ chạy nếu test thành công)
      - name: Build Docker image
        run: docker build -t mydotnetapp:latest .

      # Bước 3: Dừng và xóa container ứng dụng cũ (nếu có)
      - name: Stop and Remove Old App Container
        run: |
          docker stop mydotnetapp-container
          docker rm mydotnetapp-container
        continue-on-error: true
      
      # Bước 4: Chạy container ứng dụng mới
      - name: Run new App Container
        run: |
          docker run -d `
            --name mydotnetapp-container `
            --network cicd-network `
            mydotnetapp:latest

  # Job này để triển khai Reverse Proxy (Nginx) (CHẠY SAU)
  deploy-proxy:
    # Job này phụ thuộc vào job build-and-deploy-app, nó sẽ chỉ chạy khi app đã chạy xong
    needs: build-and-deploy-app
    runs-on: self-hosted

    steps:
      # Bước 1: Checkout code để có thể truy cập file nginx.conf
      - name: Checkout repository
        uses: actions/checkout@v4

      # Bước 2: Dừng và xóa container proxy cũ (nếu có)
      - name: Stop and Remove Old Proxy Container
        run: |
          docker stop nginx-proxy
          docker rm nginx-proxy
        continue-on-error: true

      # Bước 3: Chạy container Nginx mới
      - name: Run Nginx Proxy Container
        run: |
          docker run -d `
            --name nginx-proxy `
            --network cicd-network `
            -p 80:80 `
            -v "${{ github.workspace }}/nginx/nginx.conf:/etc/nginx/nginx.conf" `
            nginx:latest 